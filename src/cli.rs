
use clap::{App,Arg};

pub fn build_app() -> App<'static,'static> {
    App::new("propwriter")
        .version("1.0.0")
        .author("cody laeder <codylaeder@gmail.com>")
        .arg(Arg::with_name("file")
             .index(1)
             .takes_value(true)
             .multiple(false)
             .value_name("FILE")
             .next_line_help(true)
             .required(true)
             .help("file to operate one"))
        .arg(Arg::with_name("tags")
             .long("tags")
             .takes_value(true)
             .multiple(true)
             .next_line_help(true)
             .value_name("TAG")
             .help("media tags"))
        .arg(Arg::with_name("artists")
             .long("artists")
             .takes_value(true)
             .multiple(true)
             .value_name("ARTIST")
             .next_line_help(true)
             .help("artists who preformed in the work"))
        .arg(Arg::with_name("genre")
             .long("genre")
             .takes_value(true)
             .multiple(true)
             .value_name("GENRE")
             .next_line_help(true)
             .help("genre of the work"))
        .arg(Arg::with_name("producers")
             .long("producers")
             .takes_value(true)
             .multiple(true)
             .value_name("PRODUCERS")
             .next_line_help(true)
             .help("tag the producers"))
        .arg(Arg::with_name("writers")
             .long("writers")
             .takes_value(true)
             .multiple(true)
             .value_name("WRITERS")
             .next_line_help(true)
             .help("tag the writers"))
        .arg(Arg::with_name("title")
             .long("title")
             .takes_value(true)
             .value_name("TITLE")
             .next_line_help(true)
             .help("the title of the work"))
        .arg(Arg::with_name("subtitle")
             .long("subtitle")
             .takes_value(true)
             .value_name("SUBTITLE")
             .next_line_help(true)
             .help("the sub-title of the work"))
        .arg(Arg::with_name("year")
             .long("year")
             .takes_value(true)
             .value_name("YEAR")
             .next_line_help(true)
             .validator(validate_u32)
             .help("year the work was produced"))
        .arg(Arg::with_name("episode")
             .long("episode")
             .takes_value(true)
             .value_name("EPISODE")
             .next_line_help(true)
             .validator(validate_u32)
             .help("episode within season"))
        .arg(Arg::with_name("season")
             .long("season")
             .takes_value(true)
             .value_name("SEASON")
             .next_line_help(true)
             .validator(validate_u32)
             .help("season within series"))
        .arg(Arg::with_name("series-name")
             .long("series-name")
             .takes_value(true)
             .value_name("SERIES")
             .next_line_help(true)
             .help("name of the series"))
}

fn validate_u32(arg: String) -> Result<(),String> {
    match u32::from_str_radix(&arg, 10) {
        Ok(_) => Ok(()),
        Err(_) => Err(format!("cannot convert arg value:'{:?}' to unsigned 32bit int", &arg))
    }
}

